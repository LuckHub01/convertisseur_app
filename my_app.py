import streamlit as st
import os
import base64
import tempfile
from PyPDF2 import PdfReader, PdfWriter
import pandas as pd
from docx import Document
from pdf2docx import Converter
from docx2pdf import convert
import io
import zipfile
import pdfplumber

# Configuration de la page
st.set_page_config(
    page_title="üìÅ Super Convertisseur de Fichiers",
    page_icon="üîÑ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Style CSS personnalis√©
st.markdown("""
<style>
    .stApp {
        background-color: #060e2b;
    }
    .header {
        color: white;
        text-align: center;
        padding: 1rem;
    }
    .stButton>button {
        background-color: #4CAF50;
        color: white;
        border-radius: 5px;
        padding: 10px 24px;
        font-weight: bold;
        transition: all 0.3s;
    }
    .stButton>button:hover {
        background-color: #45a049;
        transform: scale(1.02);
    }
    .stDownloadButton>button {
        background-color: #2196F3;
        color: white;
        border-radius: 5px;
    }
    .stDownloadButton>button:hover {
        background-color: #0b7dda;
    }
    .stSuccess {
        background-color: #e8f5e9;
        border-left: 5px solid #4CAF50;
        padding: 1rem;
    }
    .stInfo {
        background-color: #e3f2fd;
        border-left: 5px solid #2196F3;
        padding: 1rem;
    }
    .stWarning {
        background-color: #fff8e1;
        border-left: 5px solid #FFC107;
        padding: 1rem;
    }
    .stError {
        background-color: #ffebee;
        border-left: 5px solid #F44336;
        padding: 1rem;
    }
    .robot-img {
        display: block;
        margin-left: auto;
        margin-right: auto;
        width: 200px;
        margin-bottom: 1rem;
    }
    .tab-title {
        font-size: 1.2rem;
        font-weight: bold;
        margin-bottom: 1rem;
    }
    .footer {
        text-align: center;
        color: #7f8c8d;
        margin-top: 2rem;
        padding-top: 1rem;
        border-top: 1px solid #eee;
    }
</style>
""", unsafe_allow_html=True)

def clean_column_names(columns):
    """Nettoie les noms de colonnes et g√®re les doublons"""
    cleaned = []
    seen = {}
    
    for i, col in enumerate(columns):
        # Nettoyage de base
        col = str(col).strip()
        if not col:
            col = f"Colonne_{i}"
        
        # Gestion des doublons
        if col in seen:
            seen[col] += 1
            col = f"{col}_{seen[col]}"
        else:
            seen[col] = 1
        
        cleaned.append(col)
    
    return cleaned

def detect_best_separator(lines, sample_size=5):
    """D√©tecte le meilleur s√©parateur de colonnes"""
    separators = ['\t', '  ', '|', ';', ',']
    best_sep = None
    best_score = 0
    
    for sep in separators:
        col_counts = []
        for line in lines[:min(sample_size, len(lines))]:
            parts = line.split(sep)
            col_counts.append(len(parts))
        
        if len(set(col_counts)) == 1 and col_counts[0] > best_score:
            best_score = col_counts[0]
            best_sep = sep
    
    return best_sep

def looks_like_header(header_row, data_row):
    """D√©termine si la premi√®re ligne ressemble √† des en-t√™tes"""
    if len(header_row) != len(data_row):
        return False
    
    # V√©rifie si les √©l√©ments de header_row semblent √™tre des titres
    header_indicators = sum(
        1 for h, d in zip(header_row, data_row) 
        if (h.isupper() or ' ' not in h) and not d.replace('.','').isdigit()
    )
    
    return header_indicators / len(header_row) > 0.5

def main():
    # En-t√™te avec image centrale
    st.markdown("<h1 class='header'>üîÑ Super Convertisseur de Fichiers</h1>", unsafe_allow_html=True)
    st.image("robot3.jpg", width=150, caption="Convertisseur Intelligent")
    st.markdown("""
    <div style='text-align: center; margin-bottom: 30px; font-size: 1.1rem;'>
        Transformez vos fichiers en un clin d'≈ìil!<br>PDF ‚Üî Word ‚Üî Excel ‚Ä¢ Fusion ‚Ä¢ Fractionnement
    </div>
    """, unsafe_allow_html=True)

    # Cr√©ation des onglets
    tabs = st.tabs([
        "üìÑ PDF ‚Üí Word", 
        "üìù Word ‚Üí PDF", 
        "üìä PDF ‚Üí Excel", 
        "üîó Fusion PDF", 
        "‚úÇÔ∏è Fractionnement PDF"
    ])

    # Onglet 1: PDF vers Word
    with tabs[0]:
        st.markdown("<div class='tab-title'>üìÑ Conversion PDF vers Word</div>", unsafe_allow_html=True)
        st.markdown("Transformez vos fichiers PDF en documents Word modifiables")
        
        pdf_file = st.file_uploader("Choisissez un fichier PDF", type=["pdf"], 
                                  key="pdf_to_word", help="Format PDF uniquement")
        
        if pdf_file is not None:
            col1, col2 = st.columns(2)
            with col1:
                st.info(f"üìÇ Fichier charg√©: {pdf_file.name}")
            with col2:
                convert_button = st.button("‚ú® Convertir en Word", key="convert_pdf_to_word")
            
            if convert_button:
                with st.spinner("üîç Conversion en cours... Un instant!"):
                    try:
                        # Sauvegarde temporaire du fichier PDF
                        temp_pdf = tempfile.NamedTemporaryFile(delete=False, suffix='.pdf')
                        temp_pdf.write(pdf_file.read())
                        temp_pdf.close()
                        
                        # Chemin du fichier Word de sortie
                        output_docx = os.path.splitext(temp_pdf.name)[0] + '.docx'
                        
                        # Conversion PDF en Word
                        cv = Converter(temp_pdf.name)
                        cv.convert(output_docx)
                        cv.close()
                        
                        # T√©l√©chargement du fichier converti
                        with open(output_docx, "rb") as file:
                            output_filename = os.path.splitext(pdf_file.name)[0] + '.docx'
                            docx_bytes = file.read()
                            st.download_button(
                                label="üì• T√©l√©charger le fichier Word",
                                data=docx_bytes,
                                file_name=output_filename,
                                mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                            )
                        
                        # Nettoyage des fichiers temporaires
                        os.unlink(temp_pdf.name)
                        os.unlink(output_docx)
                        
                        st.success("‚úÖ Conversion termin√©e avec succ√®s!")
                    except Exception as e:
                        st.error(f"‚ùå Une erreur est survenue: {str(e)}")

    # Onglet 2: Word vers PDF
    with tabs[1]:
        st.markdown("<div class='tab-title'>üìù Conversion Word vers PDF</div>", unsafe_allow_html=True)
        st.markdown("Convertissez vos documents Word en fichiers PDF professionnels")
        
        docx_file = st.file_uploader("Choisissez un fichier Word", type=["docx"], 
                                   key="word_to_pdf", help="Format .docx uniquement")
        
        if docx_file is not None:
            col1, col2 = st.columns(2)
            with col1:
                st.info(f"üìÇ Fichier charg√©: {docx_file.name}")
            with col2:
                convert_button = st.button("‚ú® Convertir en PDF", key="convert_word_to_pdf")
            
            if convert_button:
                with st.spinner("üîç Conversion en cours... Un instant!"):
                    try:
                        # Sauvegarde temporaire du fichier Word
                        temp_docx = tempfile.NamedTemporaryFile(delete=False, suffix='.docx')
                        temp_docx.write(docx_file.read())
                        temp_docx.close()
                        
                        # Chemin du fichier PDF de sortie
                        output_pdf = os.path.splitext(temp_docx.name)[0] + '.pdf'
                        
                        # Conversion Word en PDF
                        convert(temp_docx.name, output_pdf)
                        
                        # T√©l√©chargement du fichier converti
                        with open(output_pdf, "rb") as file:
                            output_filename = os.path.splitext(docx_file.name)[0] + '.pdf'
                            pdf_bytes = file.read()
                            st.download_button(
                                label="üì• T√©l√©charger le fichier PDF",
                                data=pdf_bytes,
                                file_name=output_filename,
                                mime="application/pdf"
                            )
                        
                        # Nettoyage des fichiers temporaires
                        os.unlink(temp_docx.name)
                        os.unlink(output_pdf)
                        
                        st.success("‚úÖ Conversion termin√©e avec succ√®s!")
                    except Exception as e:
                        st.error(f"‚ùå Une erreur est survenue: {str(e)}")

    # Onglet 3: PDF vers Excel
    with tabs[2]:
        st.markdown("<div class='tab-title'>üìä Conversion PDF vers Excel</div>", unsafe_allow_html=True)
        st.markdown("Extrayez les tableaux de vos PDF vers Excel en un clic")
        
        pdf_file = st.file_uploader("Choisissez un fichier PDF", type=["pdf"], 
                                  key="pdf_to_excel", help="Format PDF uniquement")
        
        if pdf_file is not None:
            col1, col2 = st.columns(2)
            with col1:
                st.info(f"üìÇ Fichier charg√©: {pdf_file.name}")
                page_number = st.number_input("Num√©ro de page √† extraire", min_value=1, value=1)
                all_pages = st.checkbox("Convertir toutes les pages", value=False)
            with col2:
                # D√©finir une valeur par d√©faut pour space_threshold
                space_threshold = 2  # Valeur par d√©faut
                
                advanced_options = st.checkbox("‚öôÔ∏è Options avanc√©es")
                if advanced_options:
                    table_strategy = st.selectbox(
                        "Strat√©gie d'extraction",
                        ["Auto (recommand√©)", "Tableaux uniquement", "Texte brut"]
                    )
                    space_threshold = st.slider("Seuil d'espacement pour les colonnes", 1, 10, space_threshold)
                
                convert_button = st.button("‚ú® Convertir en Excel", key="convert_pdf_to_excel")
            
            if convert_button:
                with st.spinner("üîç Analyse du PDF en cours..."):
                    try:
                        # Sauvegarde temporaire du fichier PDF
                        with tempfile.NamedTemporaryFile(delete=False, suffix='.pdf') as temp_pdf:
                            temp_pdf.write(pdf_file.read())
                            temp_path = temp_pdf.name
                        
                        # Initialisation
                        all_dfs = []
                        
                        with pdfplumber.open(temp_path) as pdf:
                            pages_to_process = pdf.pages if all_pages else [pdf.pages[page_number-1]]
                            
                            for page in pages_to_process:
                                try:
                                    # Param√®tres d'extraction par d√©faut
                                    table_settings = {
                                        "vertical_strategy": "text", 
                                        "horizontal_strategy": "text",
                                        "explicit_vertical_lines": [],
                                        "explicit_horizontal_lines": [],
                                        "snap_tolerance": 3,
                                        "join_tolerance": 3,
                                        "edge_min_length": 3,
                                        "min_words_vertical": space_threshold
                                    }
                                    
                                    # Strat√©gie d'extraction
                                    if not advanced_options or table_strategy in ["Auto (recommand√©)", "Tableaux uniquement"]:
                                        tables = page.extract_tables(table_settings)
                                        
                                        for table in tables:
                                            if len(table) > 1:  # Au moins une ligne d'en-t√™te + donn√©es
                                                # Nettoyage des noms de colonnes
                                                headers = clean_column_names(table[0])
                                                df = pd.DataFrame(table[1:], columns=headers)
                                                all_dfs.append(df)
                                    
                                    # Si mode auto ou texte brut et pas de tableaux trouv√©s
                                    if (not advanced_options or table_strategy in ["Auto (recommand√©)", "Texte brut"]) and len(all_dfs) == 0:
                                        text = page.extract_text()
                                        if text:
                                            # Traitement intelligent du texte
                                            lines = [line.strip() for line in text.split('\n') if line.strip()]
                                            
                                            # D√©tection des colonnes
                                            separator = detect_best_separator(lines)
                                            data = []
                                            
                                            for line in lines:
                                                if separator:
                                                    row = [cell.strip() for cell in line.split(separator)]
                                                else:
                                                    row = line.split(maxsplit=3)  # Limite le split pour les donn√©es simples
                                                data.append(row)
                                            
                                            if len(data) > 1:
                                                # D√©tection automatique des en-t√™tes
                                                if looks_like_header(data[0], data[1]):
                                                    headers = clean_column_names(data[0])
                                                    df = pd.DataFrame(data[1:], columns=headers)
                                                else:
                                                    df = pd.DataFrame(data)
                                                    df.columns = clean_column_names(df.columns)
                                                all_dfs.append(df)
                                
                                except Exception as e:
                                    st.warning(f"‚ö†Ô∏è Erreur sur la page {pages_to_process.index(page)+1}: {str(e)}")
                                    continue
                        
                        # Cr√©ation du fichier Excel
                        if all_dfs:
                            output = io.BytesIO()
                            with pd.ExcelWriter(output, engine='openpyxl') as writer:
                                for i, df in enumerate(all_dfs):
                                    sheet_name = f"Page_{(i//3)+1}_Table{(i%3)+1}" if all_pages else f"Donn√©es_{i+1}"
                                    df.to_excel(writer, sheet_name=sheet_name[:31], index=False)
                            
                            # T√©l√©chargement
                            output_filename = f"{os.path.splitext(pdf_file.name)[0]}_converted.xlsx"
                            st.success(f"‚úÖ Conversion r√©ussie! {len(all_dfs)} tableaux extraits.")
                            
                            st.download_button(
                                label="üì• T√©l√©charger le fichier Excel",
                                data=output.getvalue(),
                                file_name=output_filename,
                                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                            )
                            
                            # Aper√ßu
                            st.subheader("üëÄ Aper√ßu des donn√©es")
                            st.dataframe(all_dfs[0].head())
                        else:
                            st.error("‚ùå Aucune donn√©e exploitable n'a √©t√© trouv√©e dans le PDF.")
                    
                    except Exception as e:
                        st.error(f"‚ùå Erreur majeure lors de la conversion : {str(e)}")
                    finally:
                        # Nettoyage
                        if os.path.exists(temp_path):
                            os.unlink(temp_path)

    # Onglet 4: Fusion PDF
    with tabs[3]:
        st.markdown("<div class='tab-title'>üîó Fusion de fichiers PDF</div>", unsafe_allow_html=True)
        st.markdown("Combinez plusieurs fichiers PDF en un seul document")
        
        uploaded_pdfs = st.file_uploader("Choisissez plusieurs fichiers PDF", 
                                       type=["pdf"], 
                                       accept_multiple_files=True, 
                                       key="merge_pdfs",
                                       help="S√©lectionnez plusieurs fichiers PDF √† fusionner")
        
        if uploaded_pdfs:
            pdf_names = [pdf.name for pdf in uploaded_pdfs]
            st.info(f"üìÇ Fichiers charg√©s ({len(uploaded_pdfs)}): {', '.join(pdf_names)}")
            
            if st.button("‚ú® Fusionner les PDF", key="merge_pdf_button"):
                with st.spinner("üîó Fusion en cours..."):
                    try:
                        merger = PdfWriter()
                        
                        # Ajout de chaque PDF au merger
                        for pdf_file in uploaded_pdfs:
                            pdf_file.seek(0)
                            pdf = PdfReader(pdf_file)
                            for page in pdf.pages:
                                merger.add_page(page)
                        
                        # Cr√©ation du PDF fusionn√© en m√©moire
                        merged_pdf = io.BytesIO()
                        merger.write(merged_pdf)
                        merged_pdf.seek(0)
                        
                        # T√©l√©chargement du fichier fusionn√©
                        st.download_button(
                            label="üì• T√©l√©charger le PDF fusionn√©",
                            data=merged_pdf,
                            file_name="fichiers_fusionnes.pdf",
                            mime="application/pdf"
                        )
                        
                        st.success("‚úÖ Fusion termin√©e avec succ√®s!")
                    except Exception as e:
                        st.error(f"‚ùå Une erreur est survenue lors de la fusion: {str(e)}")

    # Onglet 5: Fractionnement PDF
    with tabs[4]:
        st.markdown("<div class='tab-title'>‚úÇÔ∏è Fractionnement de fichier PDF</div>", unsafe_allow_html=True)
        st.markdown("Extrayez des pages sp√©cifiques de vos fichiers PDF")
        
        pdf_file = st.file_uploader("Choisissez un fichier PDF", 
                                  type=["pdf"], 
                                  key="split_pdf",
                                  help="S√©lectionnez un PDF √† fractionner")
        
        if pdf_file is not None:
            # Lecture du PDF pour obtenir le nombre de pages
            pdf_file.seek(0)
            pdf = PdfReader(pdf_file)
            num_pages = len(pdf.pages)
            
            st.info(f"üìÇ Fichier charg√©: {pdf_file.name} ({num_pages} pages)")
            
            col1, col2 = st.columns(2)
            with col1:
                split_option = st.radio(
                    "Option de fractionnement",
                    ["Toutes les pages individuellement", "Plage de pages sp√©cifique"],
                    index=1
                )
            
            if split_option == "Plage de pages sp√©cifique":
                with col2:
                    page_range = st.text_input(
                        "Entrez la plage de pages (ex: 1-3,5,7-9)",
                        placeholder="1-3,5,7-9",
                        help="Exemples: '1-3' (pages 1 √† 3), '1,3,5' (pages 1,3,5), '1-3,5-7' (pages 1-3 et 5-7)"
                    )
            
            if st.button("‚ú® Fractionner le PDF", key="split_pdf_button"):
                with st.spinner("‚úÇÔ∏è Fractionnement en cours..."):
                    try:
                        pdf_file.seek(0)
                        pdf = PdfReader(pdf_file)
                        
                        if split_option == "Toutes les pages individuellement":
                            # Cr√©ation d'un ZIP pour contenir tous les PDF individuels
                            zip_buffer = io.BytesIO()
                            with zipfile.ZipFile(zip_buffer, 'w') as zf:
                                for i in range(len(pdf.pages)):
                                    writer = PdfWriter()
                                    writer.add_page(pdf.pages[i])
                                    
                                    # Cr√©ation du PDF individuel en m√©moire
                                    output = io.BytesIO()
                                    writer.write(output)
                                    output.seek(0)
                                    
                                    # Ajout au ZIP
                                    zf.writestr(f"page_{i+1}.pdf", output.getvalue())
                            
                            # T√©l√©chargement du ZIP
                            zip_buffer.seek(0)
                            st.download_button(
                                label="üì• T√©l√©charger toutes les pages (ZIP)",
                                data=zip_buffer,
                                file_name="pages_individuelles.zip",
                                mime="application/zip"
                            )
                            
                        else:  # Plage de pages sp√©cifique
                            if not page_range:
                                st.error("‚ùå Veuillez entrer une plage de pages valide.")
                                return
                            
                            # Parsing de la plage de pages
                            pages_to_extract = []
                            ranges = page_range.split(',')
                            for r in ranges:
                                if '-' in r:
                                    start, end = map(int, r.split('-'))
                                    pages_to_extract.extend(range(start, end + 1))
                                else:
                                    pages_to_extract.append(int(r))
                            
                            # V√©rification que les pages sont dans la plage valide
                            pages_to_extract = [p for p in pages_to_extract if 1 <= p <= len(pdf.pages)]
                            
                            if not pages_to_extract:
                                st.error("‚ùå Aucune page valide sp√©cifi√©e")
                                return
                            
                            # Cr√©ation du PDF extrait
                            writer = PdfWriter()
                            for page_num in pages_to_extract:
                                writer.add_page(pdf.pages[page_num - 1])
                            
                            # Cr√©ation du PDF en m√©moire
                            output = io.BytesIO()
                            writer.write(output)
                            output.seek(0)
                            
                            # T√©l√©chargement du PDF extrait
                            st.download_button(
                                label="üì• T√©l√©charger les pages extraites",
                                data=output,
                                file_name=f"pages_extraites_{page_range}.pdf",
                                mime="application/pdf"
                            )
                        
                        st.success("‚úÖ Fractionnement termin√© avec succ√®s!")
                    except Exception as e:
                        st.error(f"‚ùå Une erreur est survenue lors du fractionnement: {str(e)}")

    # Pied de page
    st.markdown("---")
    st.markdown("""
    <div class='footer'>
        üöÄ Application d√©velopp√©e avec Streamlit ‚Ä¢ ¬© 2025 ‚Ä¢ Version 2.0 ‚Ä¢ PIAC
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()